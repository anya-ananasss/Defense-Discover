

services:
  apigateway:
    image: 770vda/defense-discover:apigateway
    container_name: "apigateway"
    build: ./ApiGateWay
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ZOOKEEPER_CONNECT_STRING=zookeeper:2181
      - SCHEMA_REGISTRY_URL=http://schema-registry:8083
      - BOOTSTRAP_SERVERS=kafka-1:9092
      - PROMT_CLIENT_URL=http://modelservice:8082
      - ROLE_CLIENT_URL=http://userservice:8081
      - STAT_CLIENT_URL=http://userservice:8081
      - USER_CLIENT_URL=http://userservice:8081
    networks:
      - app-network

  modelservice:
    image: 770vda/defense-discover:modelservice
    container_name: "modelservice"
    build: ./ModelService
    env_file: ./app.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_URL=jdbc:postgresql://postgres2:5432/models_db
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - ZOOKEEPER_CONNECT_STRING=zookeeper:2181
      - SCHEMA_REGISTRY_URL=http://schema-registry:8083
      - BOOTSTRAP_SERVERS=kafka-1:9092
      - PROMT_CLIENT_URL=http://llmservice:8000
    networks:
      - app-network

  notificationservice:
    image: 770vda/defense-discover:notificationservice
    container_name: "notificationservice"
    build: ./NotificationService
    env_file: ./app.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ZOOKEEPER_CONNECT_STRING=zookeeper:2181
      - SCHEMA_REGISTRY_URL=http://schema-registry:8083
      - BOOTSTRAP_SERVERS=kafka-1:9092
      - MAIL_HOST=smtp.mail.ru
      - MAIL_PORT=587
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    networks:
      - app-network

  userservice:
    image: 770vda/defense-discover:userservice
    container_name: "userservice"
    build: ./UserService
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_URL=jdbc:postgresql://postgres:5432/users_db
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - ZOOKEEPER_CONNECT_STRING=zookeeper:2181
      - SCHEMA_REGISTRY_URL=http://schema-registry:8083
      - BOOTSTRAP_SERVERS=kafka-1:9092
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgresdb
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: users_db
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    networks:
      - app-network

  postgres2:
    image: postgres:latest
    container_name: postgres_db2
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: models_db
    volumes:
      - postgres_models_data:/var/lib/postgresql/data
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app-network

  kafka-1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - "19092:19092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,DOCKER://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-1:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8083
    depends_on:
      - zookeeper
      - kafka-1
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis-container
    volumes:
      - redis-data:/data
    networks:
      - app-network

  llmservice:
    image: 770vda/defense-discover:llmservice
    build: ./ModelApiService
    container_name: llmservice
    environment:
      TOKEN: ${LLM_TOKEN}
    restart: always
    networks:
      - app-network

volumes:
  postgres_users_data:
  postgres_models_data:
  redis-data:

networks:
  app-network:
    driver: bridge